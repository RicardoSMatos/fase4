"""
Aplica√ß√£o Streamlit - Gerador de Hist√≥rias Interativas
Tech Challenge Fase 4 - FIAP
"""

import streamlit as st
import sys
from pathlib import Path
import random

sys.path.append(str(Path(__file__).parent))

from src.model import TextGenerator

# Dados de exemplo (ser√£o movidos para sample_stories.py depois)
GENEROS = ["Fic√ß√£o Cient√≠fica", "Terror", "Romance", "Aventura", "Fantasia", "Mist√©rio"]
TONS = ["Aventuroso", "Sombrio", "Rom√¢ntico", "Humor√≠stico", "√âpico", "Melanc√≥lico"]

st.set_page_config(
    page_title="Gerador de Hist√≥rias",
    page_icon="ÔøΩ",
    layout="wide"
)

st.markdown("""
<style>
.main-header {font-size: 3rem; color: #FF4B4B; text-align: center;}
.story-card {background: #f0f2f6; padding: 1.5rem; border-radius: 10px; border-left: 5px solid #FF4B4B;}
.story-box {background: #e3f2fd; padding: 2rem; border-radius: 10px; border-left: 5px solid #2196F3; line-height: 1.8;}
.prompt-box {background: #fff3e0; padding: 1rem; border-radius: 8px; border-left: 4px solid #ff9800;}
</style>
""", unsafe_allow_html=True)

@st.cache_resource
def load_model(model_choice=None):
    """Carrega o modelo selecionado"""
    try:
        if model_choice:
            return TextGenerator(model_choice), None
        else:
            # Auto-detecta melhor modelo
            return TextGenerator(), None
    except Exception as e:
        return None, str(e)

def get_available_models():
    """Retorna modelos dispon√≠veis"""
    return TextGenerator.get_available_models()

def construir_prompt(genero, personagens, cenario, tom):
    """Constr√≥i o prompt otimizado para gera√ß√£o de hist√≥ria"""
    
    # In√≠cio com instru√ß√£o clara
    prompt = f"Voc√™ √© um escritor criativo especializado em {genero}.\n\n"
    
    prompt += "Escreva uma hist√≥ria original e envolvente com:\n\n"
    
    prompt += f"G√äNERO: {genero}\n"
    
    if personagens:
        prompt += f"PERSONAGENS: {personagens}\n"
        prompt += "‚Üí Desenvolva suas personalidades atrav√©s de a√ß√µes e di√°logos.\n"
    
    if cenario:
        prompt += f"\nCEN√ÅRIO: {cenario}\n"
        prompt += "‚Üí Descreva o ambiente com detalhes sensoriais.\n"
    
    if tom:
        prompt += f"\nTOM: {tom}\n"
        prompt += "‚Üí Mantenha este tom consistente ao longo da narrativa.\n"
    
    prompt += "\nREGRAS:\n"
    prompt += "‚úì Mantenha foco no tema\n"
    prompt += "‚úì Use di√°logos naturais\n"
    prompt += "‚úì Mostre, n√£o apenas conte\n"
    prompt += "‚úì Evite repeti√ß√µes\n"
    prompt += "‚úì Crie tens√£o narrativa\n"
    
    prompt += "\n---\n\nHist√≥ria:\n\n"
    
    return prompt

def gerar_historia(generator, genero, personagens="", cenario="", tom="", tamanho="media", temp=0.9, inicio=""):
    """Gera hist√≥ria baseada nos par√¢metros fornecidos"""
    tamanhos = {"curta": 300, "media": 600, "longa": 900}
    max_len = tamanhos.get(tamanho, 600)
    
    if inicio:
        # Modo continua√ß√£o MELHORADO
        prompt = f"Voc√™ √© um escritor criativo especializado em {genero}.\n\n"
        prompt += "TAREFA: Continue esta hist√≥ria de forma criativa e coerente.\n\n"
        prompt += f"G√äNERO: {genero}\n"
        if tom:
            prompt += f"TOM: {tom}\n"
        prompt += "\nREGRAS:\n"
        prompt += "‚úì Mantenha o estilo e contexto do in√≠cio\n"
        prompt += "‚úì Desenvolva a trama naturalmente\n"
        prompt += "‚úì Adicione elementos do g√™nero\n"
        prompt += "‚úì Evite repetir o que j√° foi dito\n"
        prompt += "‚úì Crie tens√£o e interesse\n\n"
        prompt += f"---\n\nIN√çCIO DA HIST√ìRIA:\n{inicio}\n\n"
        prompt += "CONTINUE A HIST√ìRIA:\n\n"
    else:
        # Modo guiado
        prompt = construir_prompt(genero, personagens, cenario, tom)
    
    historias = generator.generate(
        prompt=prompt,
        max_length=len(prompt.split()) + max_len,
        temperature=temp,
        top_k=50,
        top_p=0.95,
        repetition_penalty=1.3,
        no_repeat_ngram_size=3,
        num_return_sequences=1
    )
    
    historia = historias[0]
    
    # Extrai apenas a hist√≥ria gerada
    if "Hist√≥ria:" in historia:
        historia = historia.split("Hist√≥ria:")[-1].strip()
    else:
        historia = historia[len(prompt):].strip()
    
    return historia

def main():
    st.markdown('<h1 class="main-header">üìö Gerador de Hist√≥rias Interativas</h1>', unsafe_allow_html=True)
    st.markdown('<p style="text-align:center; color:#666;">GPT-2 Portuguese | FIAP Tech Challenge Fase 4</p>', unsafe_allow_html=True)
    
    # Obt√©m modelos dispon√≠veis
    available_models = get_available_models()
    
    # Seletor de modelo na sidebar (inicializado antes do carregamento)
    with st.sidebar:
        st.header("ü§ñ Sele√ß√£o de Modelo")
        
        model_names = list(available_models.keys())
        selected_model_name = st.selectbox(
            "Escolha o modelo:",
            model_names,
            help="Fine-tuned = treinado com suas hist√≥rias (melhor) | GPT-2 = modelo base"
        )
        selected_model_path = available_models[selected_model_name]
        
        # Mostra informa√ß√µes do modelo selecionado
        if "Fine-tuned" in selected_model_name:
            st.success("‚úÖ Usando modelo personalizado!")
            st.caption("Este modelo foi treinado especificamente com hist√≥rias criativas.")
        else:
            st.warning("‚ö†Ô∏è Usando modelo base")
            st.caption("Para melhores resultados, treine o modelo com: `python train_model_script.py`")
        
        st.markdown("---")
    
    # Carrega modelo selecionado
    with st.spinner(f"Carregando {selected_model_name}..."):
        generator, error = load_model(selected_model_path)
    
    if error:
        st.error(f"Erro ao carregar modelo: {error}")
        st.info("üí° Certifique-se de que o modelo est√° instalado: `pip install transformers torch`")
        return
    
    st.success(f"‚ú® {selected_model_name} carregado! Pronto para criar hist√≥rias incr√≠veis.")
    
    with st.sidebar:
        st.header("‚öôÔ∏è Configura√ß√µes")
        
        tamanho = st.select_slider(
            "üìè Tamanho da Hist√≥ria", 
            ["curta", "media", "longa"], 
            value="media",
            help="Curta: ~500 palavras | M√©dia: ~1000 palavras | Longa: ~1500 palavras"
        )
        
        with st.expander("üé® Configura√ß√µes Avan√ßadas de Criatividade"):
            temp = st.slider(
                "üå°Ô∏è Temperature (Criatividade)", 
                0.5, 1.3, 0.9, 0.05,
                help="üî• Maior = mais surpreendente e criativo | ‚ùÑÔ∏è Menor = mais previs√≠vel e coerente"
            )
            
            col1, col2 = st.columns(2)
            with col1:
                if temp < 0.7:
                    st.caption("‚ùÑÔ∏è Conservador")
                elif temp < 0.9:
                    st.caption("‚öñÔ∏è Balanceado")
                elif temp < 1.1:
                    st.caption("‚ú® Criativo")
                else:
                    st.caption("üî• Muito Criativo")
            
            with col2:
                st.caption("üí° Recomendado: 0.85-0.95")
            
            st.markdown("---")
            
            st.markdown("**Dicas por g√™nero:**")
            st.caption("‚Ä¢ Fic√ß√£o Cient√≠fica: 0.90-1.0 (mais criativo)")
            st.caption("‚Ä¢ Terror: 0.85-0.95 (balanceado)")
            st.caption("‚Ä¢ Romance: 0.80-0.90 (mais focado)")
            st.caption("‚Ä¢ Aventura: 0.90-1.0 (mais criativo)")
        
        st.markdown("---")
        
        # Info din√¢mica baseada no modelo
        if "Fine-tuned" in selected_model_name or "üéØ" in selected_model_name:
            st.success("**‚úÖ Modelo Otimizado para Hist√≥rias**")
            st.caption("Fine-tuned especializado em narrativas criativas")
        elif "BLOOM" in selected_model_name or "üå∏" in selected_model_name or "üå∫" in selected_model_name:
            st.info("**üå∏ BLOOM - Modelo Multil√≠ngue de Alta Qualidade**")
            if "560M" in selected_model_name:
                st.caption("560M par√¢metros | √ìtimo balan√ßo qualidade/velocidade")
            else:
                st.caption("1.1B par√¢metros | M√°xima qualidade (mais lento)")
        elif "mGPT" in selected_model_name or "üåç" in selected_model_name:
            st.info("**üåç mGPT - Modelo Multil√≠ngue**")
            st.caption("1.3B par√¢metros | Boa qualidade para portugu√™s")
        else:
            st.warning("**üìù GPT-2 Portuguese Small**")
            st.caption("124M par√¢metros | R√°pido mas qualidade limitada")
            st.caption("‚ö†Ô∏è Recomendado: Use BLOOM ou treine fine-tuned")
        
        if st.button("üóëÔ∏è Limpar Tudo"):
            for key in list(st.session_state.keys()):
                del st.session_state[key]
            st.rerun()
    
    tab1, tab2, tab3 = st.tabs(["‚ú® Criar Hist√≥ria", "üìö Exemplos", "üìä Estat√≠sticas"])
    
    with tab1:
        modo = st.radio(
            "Como deseja criar sua hist√≥ria?", 
            ["üéØ Gera√ß√£o Guiada", "‚úçÔ∏è Continua√ß√£o Criativa", "üé≤ Gera√ß√£o Livre"], 
            horizontal=True,
            help="Guiada: Controle total | Continua√ß√£o: Co-crie com o modelo | Livre: Surpresa total"
        )
        
        st.markdown("---")
        
        if modo == "üéØ Gera√ß√£o Guiada":
            st.markdown("### Defina os elementos da sua hist√≥ria")
            
            col1, col2 = st.columns(2)
            
            with col1:
                genero = st.selectbox(
                    "üìö G√™nero Liter√°rio",
                    GENEROS,
                    help="Escolha o g√™nero que define o estilo da hist√≥ria"
                )
                
                personagens = st.text_area(
                    "üë• Personagens (opcional)",
                    placeholder="Ex: Ana: cientista corajosa, Pedro: piloto experiente",
                    height=100,
                    help="Descreva os personagens principais e suas caracter√≠sticas"
                )
            
            with col2:
                tom = st.selectbox(
                    "üé≠ Tom da Narrativa",
                    TONS,
                    help="Define a atmosfera e o sentimento da hist√≥ria"
                )
                
                cenario = st.text_area(
                    "üåç Cen√°rio (opcional)",
                    placeholder="Ex: Esta√ß√£o espacial abandonada em 2089, Floresta amaz√¥nica √† noite",
                    height=100,
                    help="Descreva onde e quando a hist√≥ria acontece"
                )
            
            st.markdown("---")
            
            # Preview do prompt
            with st.expander("üëÅÔ∏è Ver Prompt que ser√° usado"):
                preview_prompt = construir_prompt(genero, personagens or "Personagens surpresa", cenario or "Cen√°rio surpresa", tom)
                st.markdown(f'<div class="prompt-box"><pre>{preview_prompt}</pre></div>', unsafe_allow_html=True)
            
            if st.button("‚ú® Gerar Hist√≥ria", type="primary", key="gerar_guiada"):
                if not genero:
                    st.warning("‚ö†Ô∏è Selecione pelo menos um g√™nero!")
                else:
                    with st.spinner("üìù Criando sua hist√≥ria... Isso pode levar alguns segundos."):
                        try:
                            historia = gerar_historia(
                                generator, 
                                genero, 
                                personagens, 
                                cenario, 
                                tom, 
                                tamanho, 
                                temp
                            )
                            
                            st.session_state.historia_atual = {
                                'genero': genero,
                                'personagens': personagens,
                                'cenario': cenario,
                                'tom': tom,
                                'historia': historia,
                                'prompt': construir_prompt(genero, personagens, cenario, tom)
                            }
                            st.session_state.total_historias = st.session_state.get('total_historias', 0) + 1
                            st.success("‚úÖ Hist√≥ria gerada com sucesso!")
                        except Exception as e:
                            st.error(f"‚ùå Erro ao gerar hist√≥ria: {e}")
        
        elif modo == "‚úçÔ∏è Continua√ß√£o Criativa":
            st.markdown("### Comece a hist√≥ria e o modelo continua")
            
            genero = st.selectbox(
                "üìö G√™nero",
                GENEROS,
                help="Ajuda o modelo a entender o estilo"
            )
            
            inicio = st.text_area(
                "‚úçÔ∏è Escreva o in√≠cio da hist√≥ria",
                placeholder="Era uma vez, em uma cidade que nunca dormia...",
                height=150,
                help="Escreva as primeiras frases. O modelo continuar√° de forma criativa!"
            )
            
            if st.button("üöÄ Continuar Hist√≥ria", type="primary", key="gerar_continuacao"):
                if not inicio or len(inicio) < 20:
                    st.warning("‚ö†Ô∏è Escreva pelo menos algumas frases para come√ßar!")
                else:
                    with st.spinner("üìù Continuando sua hist√≥ria..."):
                        try:
                            historia = gerar_historia(
                                generator,
                                genero,
                                inicio=inicio,
                                tamanho=tamanho,
                                temp=temp
                            )
                            
                            st.session_state.historia_atual = {
                                'genero': genero,
                                'inicio': inicio,
                                'historia': historia,
                                'modo': 'continuacao'
                            }
                            st.session_state.total_historias = st.session_state.get('total_historias', 0) + 1
                            st.success("‚úÖ Hist√≥ria continuada!")
                        except Exception as e:
                            st.error(f"‚ùå Erro: {e}")
        
        else:  # Gera√ß√£o Livre
            st.markdown("### Deixe o modelo criar tudo")
            st.info("üé≤ O modelo escolher√° personagens, cen√°rio e desenvolvimento aleatoriamente!")
            
            genero = st.selectbox(
                "üìö Apenas escolha o g√™nero",
                GENEROS
            )
            
            # Op√ß√£o de tema opcional
            tema_livre = st.text_input(
                "üé® Tema ou palavra-chave (opcional)",
                placeholder="Ex: rob√¥s, oceano, fam√≠lia, mist√©rio...",
                help="Deixe em branco para total liberdade criativa"
            )
            
            if st.button("üé≤ Gerar Hist√≥ria Aleat√≥ria", type="primary", key="gerar_livre"):
                with st.spinner("üé® Criando algo completamente novo..."):
                    try:
                        # Cria prompt para gera√ß√£o livre
                        prompt_livre = f"Voc√™ √© um escritor criativo especializado em {genero}.\n\n"
                        prompt_livre += f"TAREFA: Escreva uma hist√≥ria original e surpreendente de {genero}.\n\n"
                        
                        if tema_livre:
                            prompt_livre += f"TEMA SUGERIDO: {tema_livre}\n\n"
                        
                        prompt_livre += "DIRETRIZES:\n"
                        prompt_livre += "‚úì Invente personagens √∫nicos e interessantes\n"
                        prompt_livre += "‚úì Crie um cen√°rio v√≠vido e original\n"
                        prompt_livre += "‚úì Desenvolva uma trama envolvente\n"
                        prompt_livre += "‚úì Use elementos t√≠picos do g√™nero\n"
                        prompt_livre += "‚úì Seja criativo e surpreendente\n"
                        prompt_livre += "‚úì Mantenha coer√™ncia narrativa\n\n"
                        prompt_livre += "---\n\nHist√≥ria:\n\n"
                        
                        # Gera com prompt otimizado
                        historias = generator.generate(
                            prompt=prompt_livre,
                            max_length=len(prompt_livre.split()) + 600,
                            temperature=temp,
                            top_k=50,
                            top_p=0.95,
                            repetition_penalty=1.3,
                            no_repeat_ngram_size=3,
                            num_return_sequences=1
                        )
                        
                        historia = historias[0]
                        
                        # Extrai apenas a hist√≥ria
                        if "Hist√≥ria:" in historia:
                            historia = historia.split("Hist√≥ria:")[-1].strip()
                        else:
                            historia = historia[len(prompt_livre):].strip()
                        
                        st.session_state.historia_atual = {
                            'genero': genero,
                            'tema': tema_livre if tema_livre else "Livre",
                            'historia': historia,
                            'modo': 'livre'
                        }
                        st.session_state.total_historias = st.session_state.get('total_historias', 0) + 1
                        st.success("‚úÖ Hist√≥ria criada!")
                    except Exception as e:
                        st.error(f"‚ùå Erro: {e}")
        
        # Exibir hist√≥ria gerada
        if 'historia_atual' in st.session_state:
            h = st.session_state.historia_atual
            
            st.markdown("---")
            st.markdown("## ÔøΩ Sua Hist√≥ria")
            
            # Metadados
            col1, col2, col3 = st.columns(3)
            col1.metric("üìö G√™nero", h.get('genero', 'N/A'))
            
            if h.get('tom'):
                col2.metric("üé≠ Tom", h['tom'])
            
            palavras = len(h['historia'].split())
            col3.metric("üìù Palavras", palavras)
            
            # Se tiver prompt detalhado
            if h.get('prompt'):
                with st.expander("‚ÑπÔ∏è Elementos da Hist√≥ria"):
                    if h.get('personagens'):
                        st.markdown(f"**üë• Personagens:** {h['personagens']}")
                    if h.get('cenario'):
                        st.markdown(f"**üåç Cen√°rio:** {h['cenario']}")
                    if h.get('tom'):
                        st.markdown(f"**üé≠ Tom:** {h['tom']}")
            
            # Hist√≥ria
            st.markdown(f'<div class="story-box">{h["historia"]}</div>', unsafe_allow_html=True)
            
            # A√ß√µes
            col1, col2, col3 = st.columns([2, 2, 1])
            
            with col1:
                st.download_button(
                    "üíæ Baixar Hist√≥ria",
                    f"G√™nero: {h.get('genero')}\n\n{h['historia']}",
                    "minha_historia.txt",
                    mime="text/plain"
                )
            
            with col2:
                feedback = st.radio(
                    "Como ficou?",
                    ["‚≠ê Excelente", "üëç Boa", "üòê Regular", "üëé Ruim"],
                    horizontal=True,
                    key="feedback_historia"
                )
                
                if feedback:
                    if 'feedbacks' not in st.session_state:
                        st.session_state.feedbacks = []
                    st.session_state.feedbacks.append(feedback)
    
    with tab2:
        st.markdown("### ÔøΩ Hist√≥rias de Exemplo")
        st.info("Em breve: Exemplos de hist√≥rias geradas em diferentes g√™neros")
        
        # Exemplos tempor√°rios
        exemplos = [
            {
                "genero": "Fic√ß√£o Cient√≠fica",
                "personagens": "Ana (cientista), ARIA (IA)",
                "cenario": "Esta√ß√£o espacial em Marte, 2089",
                "historia": "Ana olhou pela janela transparente do laborat√≥rio. Marte estendia-se vermelho e silencioso abaixo dela. 'ARIA, status dos experimentos', ela disse. A voz suave da intelig√™ncia artificial respondeu: 'Anomalia detectada no Setor 7. Sinais de vida microbiana n√£o catalogada.' O cora√ß√£o de Ana acelerou. Ap√≥s tr√™s anos em Marte, finalmente..."
            },
            {
                "genero": "Terror",
                "personagens": "Lucas (estudante)",
                "cenario": "Casa abandonada, noite chuvosa",
                "historia": "O rel√¢mpago iluminou brevemente a sala empoeirada. Lucas engoliu em seco. N√£o deveria estar ali. A velha casa dos Almeida estava abandonada h√° d√©cadas, desde que... 'N√£o pense nisso', ele murmurou. O som de passos no andar de cima o fez congelar. Imposs√≠vel. Estava sozinho... n√£o estava?"
            },
            {
                "genero": "Romance",
                "personagens": "J√∫lia (professora), Rafael (m√∫sico)",
                "cenario": "Caf√© parisiense, outono",
                "historia": "As folhas douradas dan√ßavam no vento enquanto J√∫lia observava pela vidra√ßa do caf√©. Cinco anos desde que havia deixado S√£o Paulo. Cinco anos tentando esquecer. A campainha tocou. Ela nem se virou. At√© ouvir aquela voz conhecida: 'Ainda toma caf√© com leite e duas colheres de a√ß√∫car?'"
            }
        ]
        
        for i, ex in enumerate(exemplos):
            with st.expander(f"üìñ {ex['genero']} - {ex.get('personagens', 'Personagens variados')}"):
                st.markdown(f"**G√™nero:** {ex['genero']}")
                if ex.get('personagens'):
                    st.markdown(f"**Personagens:** {ex['personagens']}")
                if ex.get('cenario'):
                    st.markdown(f"**Cen√°rio:** {ex['cenario']}")
                st.markdown("---")
                st.markdown(ex['historia'])
    
    with tab3:
        st.markdown("### üìä Estat√≠sticas de Uso")
        
        total = st.session_state.get('total_historias', 0)
        
        if total > 0:
            col1, col2, col3 = st.columns(3)
            col1.metric("üìñ Hist√≥rias Geradas", total)
            
            if 'historia_atual' in st.session_state:
                palavras_total = len(st.session_state.historia_atual['historia'].split())
                col2.metric("üìù Palavras na √öltima Hist√≥ria", palavras_total)
                tempo_leitura = palavras_total // 200  # ~200 palavras/min
                col3.metric("‚è±Ô∏è Tempo de Leitura", f"~{tempo_leitura} min")
            
            st.markdown("---")
            
            if 'feedbacks' in st.session_state and st.session_state.feedbacks:
                st.markdown("### üåü Feedback das Hist√≥rias")
                feedback_counts = {}
                for f in st.session_state.feedbacks:
                    feedback_counts[f] = feedback_counts.get(f, 0) + 1
                
                for feedback, count in feedback_counts.items():
                    st.markdown(f"{feedback}: {count}")
        else:
            st.info("üëÜ Crie sua primeira hist√≥ria para ver as estat√≠sticas!")
        
        st.markdown("---")
        st.markdown("### üí° Dicas")
        st.markdown("""
        - **Seja espec√≠fico** nos personagens para hist√≥rias mais interessantes
        - **Temperature maior** (1.1-1.3) = mais criativo, mas pode perder coer√™ncia
        - **Temperature menor** (0.7-0.9) = mais focado e coerente
        - **Modo Continua√ß√£o** √© √≥timo para desenvolver suas pr√≥prias ideias
        - **Gera√ß√£o Livre** te surpreende com combina√ß√µes inesperadas!
        """)
    
    st.markdown("---")
    st.markdown("<div style='text-align:center;color:#666;'><p>üéì Tech Challenge Fase 4 - FIAP | ML Engineering</p></div>", unsafe_allow_html=True)

if __name__ == "__main__":
    if 'total_historias' not in st.session_state:
        st.session_state.total_historias = 0
    main()
